{
	"info": {
		"_postman_id": "e67ca134-9a39-45b5-9d44-ea94a0ff5d0c",
		"name": "auth-controller Testing",
		"description": "# About this collection\n\nThis collection helps ensure your API continues to work as expected after updates or changes. It contains sample requests for a series of tests that validate different aspects of an API, including:\n\n1. **Status code verification:** We'll check if the API returns the expected status codes for various requests, ensuring reliability and proper error handling.\n2. **JSON schema verification:** We'll make sure the JSON response conforms to a specified JSON Schema, ensuring API contracts are honored.\n3. **Response time verification:** We'll verify that the API's response time is within the acceptable range, providing a smooth user experience and optimizing performance.\n4. **Response body verification:** We'll validate the structure and content of the response body for accuracy, ensuring the integrity of the data and preventing potential issues downstream.\n5. **Header verification:** We'll confirm the presence and correct values of specific headers in the response, enabling secure and well-structured communication between your app and its users.\n    \n\n## **Using this collection**\n\n**Step 1:** Send the sample requests and view the response and test results.\n\n**Step 2:** Replace the sample request URLs with your desired API endpoints.\n\n**Step 3:** Customize the tests in the \"Tests\" tab if needed. Don't forget to save your changes.\n\n**Step 4:** Run the collection by selecting \"Run\".\n\n### Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "34300254"
	},
	"item": [
		{
			"name": "Register Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": 1,\r\n  \"firstName\": \"Michael\",\r\n  \"lastName\": \"Smith\",\r\n  \"mobileNumber\": \"8123456789\",\r\n  \"email\": \"admin@example.com\",\r\n  \"password\": \"Admin@123\",\r\n  \"roles\": [\r\n    {\r\n      \"roleId\": 101,\r\n      \"roleName\": \"ADMIN\"\r\n    }\r\n  ],\r\n  \"address\": {\r\n    \"addressId\": 0,\r\n    \"street\": \"789 Admin Avenue\",\r\n    \"buildingName\": \"Admin Plaza\",\r\n    \"city\": \"Jakarta\",\r\n    \"state\": \"DKI Jakarta\",\r\n    \"country\": \"Indonesia\",\r\n    \"pincode\": \"101100\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/register",
				"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
			},
			"response": []
		},
		{
			"name": "Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Describe the expected response shape with JSON Schema",
							"// https://json-schema.org/",
							"const expectedSchema = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"data\": {",
							"      \"type\": \"array\",",
							"      \"items\": {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"          \"title\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"author\": {",
							"            \"type\": \"string\"",
							"          },",
							"          \"published\": {",
							"            \"type\": \"integer\"",
							"          }",
							"        },",
							"        \"required\": [",
							"          \"title\",",
							"          \"author\",",
							"          \"published\"",
							"        ]",
							"      }",
							"    }",
							"  }",
							"};",
							"",
							"// Test that the response matches the expected schema using built-in schema verification",
							"pm.test('response matches JSON schema', () => {",
							"    pm.response.to.have.jsonSchema(expectedSchema);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[{\n    \"title\": \"Sapiens\",\n    \"author\": \"Yuval Noah Harari\",\n    \"published\": 2011\n}, {\n    \"title\": \"Moneyball\",\n    \"author\": \"Michael Lewis\",\n    \"published\": 2010\n}, {\n    \"title\": \"Women & Power\",\n    \"author\": \"Mary Beard\",\n    \"published\": 2017\n}]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/post",
				"description": "This request has a test using Postman's built-in support for JSON Schema verification to ensure that the response data matches the expected shape.\n\nSchema validation can be used to verify your API returns data in the right format, without worrying about the exact values. This might be helpful when testing various inputs for a consistent output format.\n\nLearn more about JSON Schema at [https://json-schema.org](https://json-schema.org/.)."
			},
			"response": []
		},
		{
			"name": "Login Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getData = () => pm.response.json().data;",
							"",
							"pm.test(\"Returns a book object\", () => {",
							"    const data = getData();",
							"",
							"    // Check the expected properties exist",
							"    pm.expect(data).to.have.property(\"title\");",
							"    pm.expect(data).to.have.property(\"author\");",
							"    pm.expect(data).to.have.property(\"published\");",
							"",
							"    // Check the values have the expected types",
							"    pm.expect(data.title).to.be.a('string');",
							"    pm.expect(data.author).to.be.a('string');",
							"    pm.expect(data.published).to.be.a('number');",
							"});",
							"",
							"pm.test(\"Return correct details for 'Sapiens' book\", () => {",
							"    const data = getData();",
							"",
							"    // Check expected values are present",
							"    pm.expect(data.title).to.equal(\"Sapiens\");",
							"    pm.expect(data.author).to.equal(\"Yuval Noah Harari\");",
							"    pm.expect(data.published).to.equal(2011);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Sapiens\",\n    \"author\": \"Yuval Noah Harari\",\n    \"published\": 2011\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/post",
				"description": "This request uses tests to verify both the structure (existence and type of individual properties) and exact values of the response data.\n\nUse `pm.expect(subject)` to wrap test subjects, and [Chai](https://www.chaijs.com/api/bdd/) for assertions."
			},
			"response": []
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getData = () => pm.response.json().data;",
							"",
							"pm.test(\"Returns a book object\", () => {",
							"    const data = getData();",
							"",
							"    // Check the expected properties exist",
							"    pm.expect(data).to.have.property(\"title\");",
							"    pm.expect(data).to.have.property(\"author\");",
							"    pm.expect(data).to.have.property(\"published\");",
							"",
							"    // Check the values have the expected types",
							"    pm.expect(data.title).to.be.a('string');",
							"    pm.expect(data.author).to.be.a('string');",
							"    pm.expect(data.published).to.be.a('number');",
							"});",
							"",
							"pm.test(\"Return correct details for 'Sapiens' book\", () => {",
							"    const data = getData();",
							"",
							"    // Check expected values are present",
							"    pm.expect(data.title).to.equal(\"Sapiens\");",
							"    pm.expect(data.author).to.equal(\"Yuval Noah Harari\");",
							"    pm.expect(data.published).to.equal(2011);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Sapiens\",\n    \"author\": \"Yuval Noah Harari\",\n    \"published\": 2011\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/post",
				"description": "This request uses tests to verify both the structure (existence and type of individual properties) and exact values of the response data.\n\nUse `pm.expect(subject)` to wrap test subjects, and [Chai](https://www.chaijs.com/api/bdd/) for assertions."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://postman-echo.com"
		}
	]
}