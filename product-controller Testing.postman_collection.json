{
	"info": {
		"_postman_id": "e528f5c7-2c2a-47e3-96cc-c89bb95eaac6",
		"name": "product-controller Testing",
		"description": "# About this collection\n\nPostman provides dynamic variables that use the [Faker library](https://www.npmjs.com/package/@faker-js/faker) to generate sample data, including random names, addresses, and email addresses.\n\nThis collection demonstrates the use of dynamic variables to create randomized mock data. The examples in this collection utilize various data types and showcase how dynamic variables can help simulate real-world data within your API testing environment.\n\n## Using this collection\n\n**Step 1: Send requests**\n\nSelect a request from the collection, review the request parameters and pre-request scripts, then hit \"Send\" to execute the request.\n\n**Step 2: Review the \"Body\" and \"Pre-request Script\"** **tabs**\n\nUnderstand how dynamic variables are used to generate mock data. Dynamic variables can be used in the request URL and Body, or even as part of a Pre-Request or Test script for more complex use cases (see \"Create mock blog post\" request).\n\n**Step 3: Customize (optional)**\n\nCustomize dynamic variables to better suit your specific use case. Save the changes, and execute the requests.\n\n**Step 4: Analyze responses**\n\nExamine the response body to see the generated mock data. Note that the responses will be different each time you send the request, as the dynamic variables ensure randomized data generation.\n\nEnjoy testing with diverse and dynamic data!\n\n## Resources\n\n[Dynamic variables](https://learning.postman.com/docs/writing-scripts/script-references/variables-list/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "34300254"
	},
	"item": [
		{
			"name": "Create Product",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"createdAt\": \"{{$isoTimestamp}}\",\n    \"address\": {\n        \"line1\": \"{{$randomStreetAddress}}\",\n        \"line2\": \"{{$randomCity}}\",\n        \"country\": \"{{$randomCountryCode}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/post",
				"description": "This request shows an example of generating mock user data in the request body. You can use this to populate some users for testing your API or application, or to ensure that your API accepts a range of inputs within certain parameters."
			},
			"response": []
		},
		{
			"name": "Get All Products By Category",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJVc2VyIERldGFpbHMiLCJpc3MiOiJFdmVudCBTY2hlZHVsZXIiLCJpYXQiOjE3MzkyNzYyNDksImVtYWlsIjoiZXRoYW4udXNlckBleGFtcGxlLmNvbSJ9.v4JZEfWZ8dN8C-JC9mL2dFcOEfjlmKgPkIKe7j6yiMA"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"createdAt\": \"{{$isoTimestamp}}\",\n    \"address\": {\n        \"line1\": \"{{$randomStreetAddress}}\",\n        \"line2\": \"{{$randomCity}}\",\n        \"country\": \"{{$randomCountryCode}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/public/categories/2/products",
				"description": "This request shows an example of generating mock user data in the request body. You can use this to populate some users for testing your API or application, or to ensure that your API accepts a range of inputs within certain parameters."
			},
			"response": []
		},
		{
			"name": "Get All Products",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJVc2VyIERldGFpbHMiLCJpc3MiOiJFdmVudCBTY2hlZHVsZXIiLCJpYXQiOjE3MzkyNzYyNDksImVtYWlsIjoiZXRoYW4udXNlckBleGFtcGxlLmNvbSJ9.v4JZEfWZ8dN8C-JC9mL2dFcOEfjlmKgPkIKe7j6yiMA"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"createdAt\": \"{{$isoTimestamp}}\",\n    \"address\": {\n        \"line1\": \"{{$randomStreetAddress}}\",\n        \"line2\": \"{{$randomCity}}\",\n        \"country\": \"{{$randomCountryCode}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/public/categories/2/products",
				"description": "This request shows an example of generating mock user data in the request body. You can use this to populate some users for testing your API or application, or to ensure that your API accepts a range of inputs within certain parameters."
			},
			"response": []
		},
		{
			"name": "Get All Products by Keyword",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJVc2VyIERldGFpbHMiLCJpc3MiOiJFdmVudCBTY2hlZHVsZXIiLCJpYXQiOjE3MzkyNzYyNDksImVtYWlsIjoiZXRoYW4udXNlckBleGFtcGxlLmNvbSJ9.v4JZEfWZ8dN8C-JC9mL2dFcOEfjlmKgPkIKe7j6yiMA"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"createdAt\": \"{{$isoTimestamp}}\",\n    \"address\": {\n        \"line1\": \"{{$randomStreetAddress}}\",\n        \"line2\": \"{{$randomCity}}\",\n        \"country\": \"{{$randomCountryCode}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/public/categories/2/products",
				"description": "This request shows an example of generating mock user data in the request body. You can use this to populate some users for testing your API or application, or to ensure that your API accepts a range of inputs within certain parameters."
			},
			"response": []
		},
		{
			"name": "Edit Product by productId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getData = () => pm.response.json().data;",
							"",
							"pm.test(\"Returns a book object\", () => {",
							"    const data = getData();",
							"",
							"    // Check the expected properties exist",
							"    pm.expect(data).to.have.property(\"title\");",
							"    pm.expect(data).to.have.property(\"author\");",
							"    pm.expect(data).to.have.property(\"published\");",
							"",
							"    // Check the values have the expected types",
							"    pm.expect(data.title).to.be.a('string');",
							"    pm.expect(data.author).to.be.a('string');",
							"    pm.expect(data.published).to.be.a('number');",
							"});",
							"",
							"pm.test(\"Return correct details for 'Sapiens' book\", () => {",
							"    const data = getData();",
							"",
							"    // Check expected values are present",
							"    pm.expect(data.title).to.equal(\"Sapiens\");",
							"    pm.expect(data.author).to.equal(\"Yuval Noah Harari\");",
							"    pm.expect(data.published).to.equal(2011);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"categoryId\": 1,\n  \"categoryName\": \"Electronics and Technologies\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/admin/categories/1",
				"description": "This request uses tests to verify both the structure (existence and type of individual properties) and exact values of the response data.\n\nUse `pm.expect(subject)` to wrap test subjects, and [Chai](https://www.chaijs.com/api/bdd/) for assertions."
			},
			"response": []
		},
		{
			"name": "Delete Product by productId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getData = () => pm.response.json().data;",
							"",
							"pm.test(\"Returns a book object\", () => {",
							"    const data = getData();",
							"",
							"    // Check the expected properties exist",
							"    pm.expect(data).to.have.property(\"title\");",
							"    pm.expect(data).to.have.property(\"author\");",
							"    pm.expect(data).to.have.property(\"published\");",
							"",
							"    // Check the values have the expected types",
							"    pm.expect(data.title).to.be.a('string');",
							"    pm.expect(data.author).to.be.a('string');",
							"    pm.expect(data.published).to.be.a('number');",
							"});",
							"",
							"pm.test(\"Return correct details for 'Sapiens' book\", () => {",
							"    const data = getData();",
							"",
							"    // Check expected values are present",
							"    pm.expect(data.title).to.equal(\"Sapiens\");",
							"    pm.expect(data.author).to.equal(\"Yuval Noah Harari\");",
							"    pm.expect(data.published).to.equal(2011);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"categoryId\": 1,\n  \"categoryName\": \"Electronics and Technologies\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/admin/categories/1",
				"description": "This request uses tests to verify both the structure (existence and type of individual properties) and exact values of the response data.\n\nUse `pm.expect(subject)` to wrap test subjects, and [Chai](https://www.chaijs.com/api/bdd/) for assertions."
			},
			"response": []
		},
		{
			"name": "Edit Product Image by productId Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getData = () => pm.response.json().data;",
							"",
							"pm.test(\"Returns a book object\", () => {",
							"    const data = getData();",
							"",
							"    // Check the expected properties exist",
							"    pm.expect(data).to.have.property(\"title\");",
							"    pm.expect(data).to.have.property(\"author\");",
							"    pm.expect(data).to.have.property(\"published\");",
							"",
							"    // Check the values have the expected types",
							"    pm.expect(data.title).to.be.a('string');",
							"    pm.expect(data.author).to.be.a('string');",
							"    pm.expect(data.published).to.be.a('number');",
							"});",
							"",
							"pm.test(\"Return correct details for 'Sapiens' book\", () => {",
							"    const data = getData();",
							"",
							"    // Check expected values are present",
							"    pm.expect(data.title).to.equal(\"Sapiens\");",
							"    pm.expect(data.author).to.equal(\"Yuval Noah Harari\");",
							"    pm.expect(data.published).to.equal(2011);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"categoryId\": 1,\n  \"categoryName\": \"Electronics and Technologies\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/admin/categories/1",
				"description": "This request uses tests to verify both the structure (existence and type of individual properties) and exact values of the response data.\n\nUse `pm.expect(subject)` to wrap test subjects, and [Chai](https://www.chaijs.com/api/bdd/) for assertions."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://postman-echo.com"
		}
	]
}